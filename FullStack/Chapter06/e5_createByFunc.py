import numpy as np

print("----------通过函数创建矩阵----------")
print("\n----------NumPy 的 arange 函数----------")

# 1. 起始点为0，结束点为5，步长为1和返回类型 array 的一维矩阵
arr1 = np.arange(5)
print(arr1, '\n')

# 2. 生成一个一维矩阵，重置为2行3列的二维矩阵
arr2 = np.arange(6).reshape(2, 3)
print(arr2, '\n')

# 3. 生成一个从5开始到20(不包括20)，步长为2的一维矩阵
arr3 = np.arange(5, 20, step=2)
print(arr3)

print("\n----------NumPy 的随机函数----------")

# 1. 生成随机数
print("rand = ", np.random.rand(5))
print("randint = ", np.random.randint(10))
print("randn = ", np.random.randn(4, 5), '\n')

# 每次运行脚本，返回的结果都不一样，如果希望每次获得的随机数是一
# 样的，就需要设置随机数种子，此时每次返回的结果都一样。
np.random.seed(1)

print("rand = ", np.random.rand(5))
print("randint = ", np.random.randint(10))
print("randn=", np.random.randn(4, 5), '\n')

# 2. 使用 np.randn() 随机函数创建一个 3*3 的矩阵，矩阵中元素的值是随机
# 产生的，每次运行脚本产生的随机数也都不一样
arr4 = np.random.randn(3, 3)
print(arr4, '\n')

# 3. NumPy 的 linspace() 函数
# np.linspace 函数用于创建指定数量等间隔的序列，实际上是生成一个等差数列

# 生成首位是0，末位是10，含7个数的等差数列
arr5 = np.linspace(0, 10, 7)
print(arr5, '\n')

# 4. NumPy 的 logspace() 函数
# np.logspace 函数用于生成等比数列。在 np.logspace 函数中，开始点和
# 结束点是10的幂，0代表10的0次方，9代表10的9次方

# 生成首位是0，末位是9，含10个数的等比数列，默认以10为底
arr6 = np.logspace(0, 9, 10)
print(arr6, '\n')

# 改变基数，不让它以10为底数，修改 base 参数即可
# 生成以2为底的等比数列
arr7 = np.logspace(0, 9, 10, base=2)
print(arr7)


"""
>>> Execution Result:
----------通过函数创建矩阵----------

----------NumPy 的 arange 函数----------
[0 1 2 3 4]

[[0 1 2]
 [3 4 5]]

[ 5  7  9 11 13 15 17 19]

----------NumPy 的随机函数----------
rand =  [0.27084075 0.60942147 0.1484434  0.99273742 0.33706422]
randint =  4
randn =  [[ 1.61278847  0.16463901 -0.92515224 -0.35206121  0.61337804]
 [ 0.20335215 -2.05696353  1.43111172  0.38141468  0.33690991]
 [-0.14544741  1.09774887  0.22531418  0.47130279 -1.78320194]
 [-1.18734047 -0.34229882 -0.86846797 -0.59534256  1.71687592]]

rand =  [4.17022005e-01 7.20324493e-01 1.14374817e-04 3.02332573e-01
 1.46755891e-01]
randint =  0
randn= [[-1.601721   -1.47782957  0.48349585  0.18843661 -0.46468632]
 [ 0.86182712 -2.65426198  1.15226492  0.19664341 -1.54521415]
 [-0.08810409  0.85223932  0.67723401 -0.10687843  0.72527406]
 [ 0.93488915  1.11829698  0.05561319  0.37665664  0.37613502]]

[[-0.16419077 -0.08454345  0.93155816]
 [ 1.70693497 -0.89191376  1.73559653]
 [-0.63110833 -0.90734336  0.37475197]]

[ 0.          1.66666667  3.33333333  5.          6.66666667  8.33333333
 10.        ]

[1.e+00 1.e+01 1.e+02 1.e+03 1.e+04 1.e+05 1.e+06 1.e+07 1.e+08 1.e+09]

[  1.   2.   4.   8.  16.  32.  64. 128. 256. 512.]
"""
